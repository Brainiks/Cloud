


async function handleFileUpload(event) {
  const file = event.target.files[0]; // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
  if (!file) {
      alert("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.");
      return;
  }

  const formData = new FormData(); // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FormData
  formData.append('file', file); // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ FormData

  try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await fetch('http://localhost:8000/upload/', {
          method: 'POST',
          body: formData,
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      if (response.ok) {
          const data = await response.json();
          alert(`–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n–ò–º—è —Ñ–∞–π–ª–∞: ${data.filename}\n–†–∞–∑–º–µ—Ä: ${data.size} –±–∞–π—Ç`);
      } else {
          const errorData = await response.json();
          alert(`–û—à–∏–±–∫–∞: ${errorData.detail}`);
      }
  } catch (error) {
      alert(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadFiles() {
    try {
        const response = await fetch('http://localhost:8000/files/');
        if (response.ok) {
            const data = await response.json();
            const fileGridDiv = document.getElementById('fileGrid');
            fileGridDiv.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

            if (data.files.length === 0) {
                fileGridDiv.innerHTML = '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.</p>';
            } else {
                data.files.forEach(file => {
                    const fileItem = document.createElement('div');
                    fileItem.className = 'file-item';

                    // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å
                    fileItem.innerHTML = `<input type="checkbox" class="file-checkbox" data-filename="${file.filename}">`;

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                    const isImage = file.filename.match(/\.(jpg|jpeg|png|gif|bmp)$/i);
                    if (isImage) {
                        // –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                        fileItem.innerHTML += `
                            <img src="http://localhost:8000/file/${file.filename}" alt="${file.filename}">
                            <p>${file.filename}</p>
                        `;
                    } else {
                        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É
                        fileItem.innerHTML += `
                            <i class="file-icon">üìÑ</i>
                            <p>${file.filename}</p>
                        `;
                    }

                    fileGridDiv.appendChild(fileItem);
                });
            }
        } else {
            const errorData = await response.json();
            alert(`–û—à–∏–±–∫–∞: ${errorData.detail}`);
        }
    } catch (error) {
        alert(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
async function downloadSelectedFiles() {
    const checkboxes = document.querySelectorAll('.file-checkbox:checked');
    if (checkboxes.length === 0) {
        alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.");
        return;
    }

    for (const checkbox of checkboxes) {
        const filename = checkbox.getAttribute('data-filename');
        const link = document.createElement('a');
        link.href = `http://localhost:8000/file/${filename}`;
        link.download = filename;
        link.click();

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        await new Promise(resolve => setTimeout(resolve, 500)); // 500 –º—Å
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = loadFiles;

